import 'package:flutter/material.dart';
import 'package:spm/src/core/services/auth_service.dart';
import 'package:spm/src/shared/widgets/app_snackbar.dart';
import 'package:spm/src/screens/auth/register/register_screen.dart';
import 'package:spm/src/shared/widgets/main_navigator.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final AuthService _authService = AuthService();

  bool _isLoading = false;
  Map<String, String?> _fieldErrors = {};

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  void _clearFieldError(String field) {
    if (_fieldErrors.containsKey(field)) {
      setState(() {
        _fieldErrors.remove(field);
      });
    }
  }

  Future<void> _handleLogin() async {
    // Limpiar errores previos
    setState(() {
      _fieldErrors.clear();
    });

    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();

    // Validar campos
    final validationErrors = _authService.validateLoginFields(email, password);

    if (validationErrors.isNotEmpty) {
      setState(() {
        _fieldErrors = validationErrors;
      });
      AppSnackBar.showError(
        context,
        'Por favor completa todos los campos correctamente',
      );
      return;
    }

    // Mostrar loading
    setState(() {
      _isLoading = true;
    });

    AppSnackBar.showLoading(context, 'Iniciando sesión...');

    try {
      final result = await _authService.login(email, password);

      if (mounted) {
        AppSnackBar.hide(context);

        if (result.success) {
          AppSnackBar.showSuccess(context, 'Sesión iniciada correctamente');

          // Navegar al main navigator después de un breve delay
          await Future.delayed(const Duration(milliseconds: 1500));

          if (mounted) {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => const MainNavigator()),
            );
          }
        } else {
          String friendlyMessage =
              result.errorMessage ?? 'Credenciales incorrectas';
          if (friendlyMessage.contains('User not found') ||
              friendlyMessage.contains('usuario no encontrado')) {
            friendlyMessage =
                'No existe una cuenta con este correo electrónico';
          } else if (friendlyMessage.contains('password') ||
              friendlyMessage.contains('contraseña')) {
            friendlyMessage = 'La contraseña es incorrecta';
          }
          AppSnackBar.showError(context, friendlyMessage);
        }
      }
    } catch (e) {
      if (mounted) {
        AppSnackBar.hide(context);
        AppSnackBar.showError(
          context,
          'Ocurrió un problema al iniciar sesión. Inténtalo de nuevo.',
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF5F5F5),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const SizedBox(height: 50),
                const LoginLogo(),
                const SizedBox(height: 30),
                const LoginTitle(),
                const SizedBox(height: 30),

                // Login form section
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.1),
                        spreadRadius: 1,
                        blurRadius: 5,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      // Email field
                      ValidatedTextField(
                        controller: _emailController,
                        hintText: 'Correo electrónico',
                        keyboardType: TextInputType.emailAddress,
                        prefixIcon: Icons.email_outlined,
                        errorText: _fieldErrors['email'],
                        onChanged: (_) => _clearFieldError('email'),
                      ),
                      const SizedBox(height: 16),

                      // Password field
                      ValidatedTextField(
                        controller: _passwordController,
                        hintText: 'Contraseña',
                        obscureText: true,
                        prefixIcon: Icons.lock_outline,
                        errorText: _fieldErrors['password'],
                        onChanged: (_) => _clearFieldError('password'),
                      ),
                      const SizedBox(height: 20),

                      // Login button
                      SizedBox(
                        width: double.infinity,
                        height: 50,
                        child: ElevatedButton(
                          onPressed: _isLoading ? null : _handleLogin,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFFE53935),
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            elevation: 2,
                          ),
                          child: _isLoading
                              ? const SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    valueColor: AlwaysStoppedAnimation<Color>(
                                      Colors.white,
                                    ),
                                  ),
                                )
                              : const Text(
                                  'Iniciar Sesión',
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                        ),
                      ),
                      const SizedBox(height: 10),
                      const ForgotPasswordLink(),
                    ],
                  ),
                ),

                const SizedBox(height: 20),
                const SocialLoginOptions(),
                const SizedBox(height: 20),
                GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => const RegisterScreen(),
                      ),
                    );
                  },
                  child: const RegisterLink(),
                ),
                const SizedBox(height: 50),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
