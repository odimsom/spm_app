import 'package:flutter/material.dart';
import 'package:spm/src/core/theme/colors/app_colors.dart';
import 'package:spm/src/core/utils/app_constants.dart';
import 'package:spm/src/core/models/place.dart';
import 'package:spm/src/core/services/places_service.dart';
import 'package:spm/src/shared/widgets/app_image.dart';
import 'package:spm/src/shared/widgets/new_place_card.dart';
import 'package:spm/src/screens/detail/new_view_detail_screen.dart';
import 'package:spm/src/shared/widgets/app_snackbar.dart';
import 'package:spm/src/core/models/place_detail.dart';

class NewHomeScreen extends StatefulWidget {
  const NewHomeScreen({super.key});

  @override
  State<NewHomeScreen> createState() => _NewHomeScreenState();
}

class _NewHomeScreenState extends State<NewHomeScreen> {
  final PlacesService _userService = PlacesService();
  List<Place> _recommendedPlaces = [];
  List<Place> _popularPlaces = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _pageController.addListener(() {
      int page = _pageController.page?.round() ?? 0;
      if (page != _currentPageIndex) {
        setState(() {
          _currentPageIndex = page;
        });
      }
    });
    _loadPlaces();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _loadPlaces() async {
    try {
      final featured = await _placesService.getFeaturedPlaces(limit: 3);
      final recommended = await _placesService.getRecommendedPlaces(limit: 6);

      setState(() {
        _featuredPlaces = featured;
        _recommendedPlaces = recommended;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error cargando lugares: $e')));
      }
    }
  }

  Future<void> _toggleFavorite(Place place) async {
    try {
      await _userService.toggleFavorite(place.id);
      AppSnackBar.showSuccess(
        context,
        place.isFavorite ? 'Eliminado de favoritos' : 'Agregado a favoritos',
      );
      // Reload places to reflect favorite changes
      _loadPlaces();
    } catch (e) {
      AppSnackBar.showError(context, 'Error al actualizar favoritos');
    }
  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.scaffoldBackground,
      appBar: AppBar(
        backgroundColor: AppColors.scaffoldBackground,
        elevation: 0,
        automaticallyImplyLeading: false,
        title: Text(
          'San Pedro de Macorís',
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
            color: AppColors.primary,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        actions: [
          IconButton(
            onPressed: () {
              // Función de búsqueda deshabilitada temporalmente
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Función de búsqueda en desarrollo')),
              );
            },
            icon: Icon(Icons.search, color: AppColors.textSecondary),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _loadPlaces,
              child: SingleChildScrollView(
                padding: AppResponsive.getResponsivePadding(context),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Featured Places Carousel
                    if (_featuredPlaces.isNotEmpty) ...[
                      SizedBox(
                        height: 200,
                        child: PageView.builder(
                          controller: _pageController,
                          onPageChanged: (index) {
                            setState(() {
                              _currentPageIndex = index;
                            });
                          },
                          itemCount: _featuredPlaces.length,
                          itemBuilder: (context, index) {
                            return _buildFeaturedPlace(_featuredPlaces[index]);
                          },
                        ),
                      ),

                      // Page Indicators
                      Padding(
                        padding: EdgeInsets.symmetric(
                          vertical: AppConstants.spacingMd,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: List.generate(
                            _featuredPlaces.length,
                            (index) => Container(
                              width: 8,
                              height: 8,
                              margin: EdgeInsets.symmetric(
                                horizontal: AppConstants.spacingXs / 2,
                              ),
                              decoration: BoxDecoration(
                                shape: BoxShape.circle,
                                color: index == _currentPageIndex
                                    ? AppColors.primary
                                    : Colors.grey.shade300,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],

                    // Recommended Section
                    Padding(
                      padding: EdgeInsets.symmetric(
                        vertical: AppConstants.spacingSm,
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Lugares Recomendados',
                            style: Theme.of(context).textTheme.titleLarge
                                ?.copyWith(fontWeight: FontWeight.bold),
                          ),
                          TextButton(
                            onPressed: () {
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(content: Text('Función de búsqueda en desarrollo')),
                              );
                            },
                            child: Text(
                              'Ver más',
                              style: TextStyle(color: AppColors.primary),
                            ),
                          ),
                        ],
                      ),
                    ),

                    // Recommended Places Grid
                    if (_recommendedPlaces.isNotEmpty)
                      GridView.builder(
                        physics: const NeverScrollableScrollPhysics(),
                        shrinkWrap: true,
                        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                          crossAxisCount: AppResponsive.isMobile(context)
                              ? 2
                              : 3,
                          childAspectRatio: 0.8,
                          mainAxisSpacing: AppConstants.gridSpacing,
                          crossAxisSpacing: AppConstants.gridSpacing,
                        ),
                        itemCount: _recommendedPlaces.length,
                        itemBuilder: (context, index) {
                          return NewPlaceCard(
                            place: _recommendedPlaces[index],
                            onTap: () =>
                                _navigateToDetail(_recommendedPlaces[index]),
                            onFavorite: () =>
                                _toggleFavorite(_recommendedPlaces[index]),
                          );
                        },
                      ),

                    SizedBox(height: AppConstants.spacingXl),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildFeaturedPlace(Place place) {
    return GestureDetector(
      onTap: () => _navigateToDetail(place),
      child: Container(
        margin: EdgeInsets.symmetric(horizontal: AppConstants.spacingSm),
        decoration: BoxDecoration(
          borderRadius: AppConstants.borderRadiusMd,
          boxShadow: [
            BoxShadow(
              color: AppColors.shadowColor,
              blurRadius: AppConstants.elevationMd,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Stack(
          fit: StackFit.expand,
          children: [
            AppImage(
              imageData: place.mainImage,
              borderRadius: AppConstants.borderRadiusMd,
              fit: BoxFit.cover,
            ),

            // Gradient overlay
            Container(
              decoration: BoxDecoration(
                borderRadius: AppConstants.borderRadiusMd,
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [Colors.transparent, Colors.black.withValues(alpha: 0.7)],
                ),
              ),
            ),

            // Content
            Positioned(
              bottom: AppConstants.spacingMd,
              left: AppConstants.spacingMd,
              right: AppConstants.spacingMd,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    place.name,
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: AppConstants.spacingXs),
                  Row(
                    children: [
                      ...List.generate(5, (index) {
                        return Icon(
                          index < place.rating.floor()
                              ? Icons.star
                              : (index < place.rating
                                    ? Icons.star_half
                                    : Icons.star_border),
                          color: Colors.amber,
                          size: 18,
                        );
                      }),
                      SizedBox(width: AppConstants.spacingXs),
                      Text(
                        place.rating.toStringAsFixed(1),
                        style: Theme.of(
                          context,
                        ).textTheme.bodyMedium?.copyWith(color: Colors.white),
                      ),
                    ],
                  ),
                ],
              ),
            ),

            // Favorite button
            Positioned(
              top: AppConstants.spacingMd,
              right: AppConstants.spacingMd,
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.9),
                  shape: BoxShape.circle,
                ),
                child: IconButton(
                  icon: Icon(
                    place.isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: place.isFavorite
                        ? AppColors.error
                        : Colors.grey.shade600,
                  ),
                  onPressed: () => _toggleFavorite(place),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _navigateToDetail(Place place) {
    final placeDetail = PlaceDetail(
      id: place.id,
      name: place.name,
      imagePath: place.mainImage.path,
      rating: place.rating,
      description: place.description,
      isFavorite: place.isFavorite,
    );

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => NewViewDetailScreen(place: placeDetail),
      ),
    );
  }
}
